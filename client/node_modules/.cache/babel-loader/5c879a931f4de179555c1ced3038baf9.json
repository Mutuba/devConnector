{"ast":null,"code":"import axios from \"axios\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED, AUTH_ERROR, LOGOUT } from \"./types\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from \"../util/setAuthToken\"; //load user\n// loadUser is an action creator\n\nexport const loadUser = () => async dispatch => {\n  //register or login sets a token in the local storage\n  // checking if there is and calling setAuthToken to set the headers with our token to conform\n  //to api expectation that a requeat to auth should have a token makes sense\n  //the api parses the token and if valod returns a user based on the token's user id\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    // valid token's response is user data as per the token\n    //hence the dispatch of USER_LOADED with payload as res.data\n    const res = await axios.get(\"http://localhost:5000/api/auth\"); // console.log(\"here\", res.data);\n\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //register user\n\nconst registerSuccess = data => ({\n  type: REGISTER_SUCCESS,\n  payload: data\n});\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:5000/api/users\", body, config);\n    dispatch(registerSuccess(res.data)); //if reg is successful a token will be set in the local storage\n    // hence makes sense to load a user of the token\n\n    dispatch(loadUser);\n  } catch (error) {\n    //alert component is actively watching for errors and\n    //whenever set alert is triggered the alerts will show\n    // console.log(error.response.data.errors);\n    let errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // action creator for login\n\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // email and password are received as js object and stringfy\n  //coverts to json string to be sent to the backend\n\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"http://localhost:5000/api/auth\", body, config);\n    dispatch(loginSuccess(res.data));\n    dispatch(loadUser);\n  } catch (error) {\n    //alert component is actively watching for errors and\n    //whenever set alert is triggered the alerts will show\n    console.log(error.response.data.errors);\n    let errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //login user (a thunk that returns an action )\n\nconst loginSuccess = data => ({\n  type: LOGIN_SUCCESS,\n  payload: data\n}); //Logout user\n\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/mutuba/Desktop/projects/devConnector/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED","AUTH_ERROR","LOGOUT","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","error","registerSuccess","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","msg","login","loginSuccess","console","log","logout"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGOUT\n} from \"./types\";\nimport { setAlert } from \"./alert\";\nimport setAuthToken from \"../util/setAuthToken\";\n\n//load user\n// loadUser is an action creator\nexport const loadUser = () => async dispatch => {\n  //register or login sets a token in the local storage\n  // checking if there is and calling setAuthToken to set the headers with our token to conform\n  //to api expectation that a requeat to auth should have a token makes sense\n  //the api parses the token and if valod returns a user based on the token's user id\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n  try {\n    // valid token's response is user data as per the token\n    //hence the dispatch of USER_LOADED with payload as res.data\n    const res = await axios.get(\"http://localhost:5000/api/auth\");\n    // console.log(\"here\", res.data);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n};\n//register user\nconst registerSuccess = data => ({ type: REGISTER_SUCCESS, payload: data });\n\nexport const register = ({ name, email, password }) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  const body = JSON.stringify({ name, email, password });\n  try {\n    const res = await axios.post(\n      \"http://localhost:5000/api/users\",\n      body,\n      config\n    );\n    dispatch(registerSuccess(res.data));\n    //if reg is successful a token will be set in the local storage\n    // hence makes sense to load a user of the token\n    dispatch(loadUser);\n  } catch (error) {\n    //alert component is actively watching for errors and\n    //whenever set alert is triggered the alerts will show\n    // console.log(error.response.data.errors);\n    let errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\n\n// action creator for login\nexport const login = ({ email, password }) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  // email and password are received as js object and stringfy\n  //coverts to json string to be sent to the backend\n  const body = JSON.stringify({ email, password });\n  try {\n    const res = await axios.post(\n      \"http://localhost:5000/api/auth\",\n      body,\n      config\n    );\n    dispatch(loginSuccess(res.data));\n    dispatch(loadUser);\n  } catch (error) {\n    //alert component is actively watching for errors and\n    //whenever set alert is triggered the alerts will show\n    console.log(error.response.data.errors);\n    let errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\n\n//login user (a thunk that returns an action )\nconst loginSuccess = data => ({ type: LOGIN_SUCCESS, payload: data });\n//Logout user\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};\n"]},"metadata":{},"sourceType":"module"}