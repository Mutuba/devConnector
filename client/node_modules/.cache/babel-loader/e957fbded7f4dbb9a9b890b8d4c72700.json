{"ast":null,"code":"import { GET_POSTS, POST_ERROR, UPDATE_LIKES, UPDATE_DISLIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from \"../actions/types\";\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        error: payload,\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          likes: payload.likes,\n          dislikes: post.dislikes.filter(dislike => dislike.user !== payload.userId)\n        } : post),\n        loading: false\n      };\n\n    case UPDATE_DISLIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload.id ? { ...post,\n          dislikes: payload.dislikes,\n          likes: post.likes.filter(like => like.user !== payload.userId)\n        } : post),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case REMOVE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/mutuba/Desktop/projects/devConnector/client/src/reducers/post.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","UPDATE_DISLIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","map","id","likes","dislikes","dislike","user","userId","like","comments","comment"],"mappings":"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","sourcesContent":["import {\n  GET_POSTS,\n  POST_ERROR,\n  UPDATE_LIKES,\n  UPDATE_DISLIKES,\n  DELETE_POST,\n  ADD_POST,\n  GET_POST,\n  ADD_COMMENT,\n  REMOVE_COMMENT\n} from \"../actions/types\";\n\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\n\nexport default function(state = initialState, action) {\n  const { type, payload } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return {\n        ...state,\n        posts: payload,\n        loading: false\n      };\n    case GET_POST:\n      return {\n        ...state,\n        post: payload,\n        loading: false\n      };\n    case ADD_POST:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n    case DELETE_POST:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n    case POST_ERROR:\n      return {\n        ...state,\n        error: payload,\n        loading: false\n      };\n    case UPDATE_LIKES:\n      return {\n        ...state,\n        posts: state.posts.map(post =>\n          post._id === payload.id\n            ? {\n                ...post,\n                likes: payload.likes,\n                dislikes: post.dislikes.filter(\n                  dislike => dislike.user !== payload.userId\n                )\n              }\n            : post\n        ),\n        loading: false\n      };\n    case UPDATE_DISLIKES:\n      return {\n        ...state,\n        posts: state.posts.map(post =>\n          post._id === payload.id\n            ? {\n                ...post,\n                dislikes: payload.dislikes,\n                likes: post.likes.filter(like => like.user !== payload.userId)\n              }\n            : post\n        ),\n        loading: false\n      };\n    case ADD_COMMENT:\n      return {\n        ...state,\n        post: { ...state.post, comments: payload },\n        loading: false\n      };\n    case REMOVE_COMMENT:\n      return {\n        ...state,\n        post: {\n          ...state.post,\n          comments: state.post.comments.filter(\n            comment => comment._id !== payload\n          )\n        },\n        loading: false\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}